// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       String           @id @default(cuid())
  name                     String           @default("")
  lastName                 String           @default("")
  username                 String           @unique @default("")
  email                    String           @unique @default("")
  password                 String
  phone                    String           @default("")
  role                     UserRoleType     @default(admin)
  profileImage_id          String?
  profileImage_filesize    Int?
  profileImage_width       Int?
  profileImage_height      Int?
  profileImage_extension   String?
  birthday                 DateTime?        @postgresql.Date
  createdAt                DateTime?        @default(now())
  from_Animal_user         Animal[]         @relation("Animal_user")
  from_AnimalFavorite_user AnimalFavorite[] @relation("AnimalFavorite_user")
  from_AnimalComment_user  AnimalComment[]  @relation("AnimalComment_user")
}

model Animal {
  id                           String             @id @default(cuid())
  name                         String             @default("")
  animal_type                  AnimalType?        @relation("Animal_animal_type", fields: [animal_typeId], references: [id])
  animal_typeId                String?            @map("animal_type")
  user                         User?              @relation("Animal_user", fields: [userId], references: [id])
  userId                       String?            @map("user")
  createdAt                    DateTime?          @default(now())
  from_AnimalMultimedia_animal AnimalMultimedia[] @relation("AnimalMultimedia_animal")
  from_AnimalFavorite_animal   AnimalFavorite[]   @relation("AnimalFavorite_animal")
  from_AnimalHistory_animal    AnimalHistory[]    @relation("AnimalHistory_animal")
  from_AnimalComment_animal    AnimalComment[]    @relation("AnimalComment_animal")

  @@index([animal_typeId])
  @@index([userId])
}

model AnimalType {
  id                      String   @id @default(cuid())
  name                    String?  @unique @default("dog")
  order                   Int?
  from_Animal_animal_type Animal[] @relation("Animal_animal_type")
}

model AnimalMultimedia {
  id              String    @id @default(cuid())
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  animal          Animal?   @relation("AnimalMultimedia_animal", fields: [animalId], references: [id])
  animalId        String?   @map("animal")
  createdAt       DateTime? @default(now())

  @@index([animalId])
}

model AnimalFavorite {
  id        String    @id @default(cuid())
  animal    Animal?   @relation("AnimalFavorite_animal", fields: [animalId], references: [id])
  animalId  String?   @map("animal")
  user      User?     @relation("AnimalFavorite_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  createdAt DateTime? @default(now())

  @@index([animalId])
  @@index([userId])
}

model AnimalHistory {
  id        String    @id @default(cuid())
  animal    Animal?   @relation("AnimalHistory_animal", fields: [animalId], references: [id])
  animalId  String?   @map("animal")
  status    String?   @default("Registrado")
  notes     String    @default("")
  lat       String    @default("")
  lng       String    @default("")
  createdAt DateTime? @default(now())

  @@index([animalId])
}

model AnimalComment {
  id        String    @id @default(cuid())
  comment   String    @default("")
  animal    Animal?   @relation("AnimalComment_animal", fields: [animalId], references: [id])
  animalId  String?   @map("animal")
  user      User?     @relation("AnimalComment_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  createdAt DateTime? @default(now())

  @@index([animalId])
  @@index([userId])
}

enum UserRoleType {
  admin
  user
}
