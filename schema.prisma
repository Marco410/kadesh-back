// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                          String              @id @default(cuid())
  name                        String              @default("")
  lastName                    String              @default("")
  secondLastName              String              @default("")
  username                    String              @unique @default("")
  email                       String              @unique @default("")
  password                    String
  phone                       String              @default("")
  role                        UserRoleType        @default(user)
  profileImage_id             String?
  profileImage_filesize       Int?
  profileImage_width          Int?
  profileImage_height         Int?
  profileImage_extension      String?
  birthday                    DateTime?           @postgresql.Date
  smsRegistrationId           String              @default("")
  verified                    Boolean             @default(false)
  createdAt                   DateTime?           @default(now())
  from_Animal_user            Animal[]            @relation("Animal_user")
  from_AnimalFavorite_user    AnimalFavorite[]    @relation("AnimalFavorite_user")
  from_AnimalComment_user     AnimalComment[]     @relation("AnimalComment_user")
  from_Pet_user               Pet[]               @relation("Pet_user")
  from_Veterinary_user        Veterinary[]        @relation("Veterinary_user")
  from_VeterinaryLike_user    VeterinaryLike[]    @relation("VeterinaryLike_user")
  from_Review_user            Review[]            @relation("Review_user")
  from_PetShelter_user        PetShelter[]        @relation("PetShelter_user")
  from_WishList_user          WishList[]          @relation("WishList_user")
  from_Cart_user              Cart[]              @relation("Cart_user")
  from_Order_user             Order[]             @relation("Order_user")
  from_PaymentMethod_user     PaymentMethod[]     @relation("PaymentMethod_user")
  from_TokenNotification_user TokenNotification[] @relation("TokenNotification_user")
}

model Animal {
  id                         String             @id @default(cuid())
  name                       String             @default("")
  animal_breed               AnimalBreed?       @relation("Animal_animal_breed", fields: [animal_breedId], references: [id])
  animal_breedId             String?            @map("animal_breed")
  user                       User?              @relation("Animal_user", fields: [userId], references: [id])
  userId                     String?            @map("user")
  multimedia                 AnimalMultimedia[] @relation("AnimalMultimedia_animal")
  history                    AnimalHistory[]    @relation("AnimalHistory_animal")
  createdAt                  DateTime?          @default(now())
  from_AnimalFavorite_animal AnimalFavorite[]   @relation("AnimalFavorite_animal")
  from_AnimalComment_animal  AnimalComment[]    @relation("AnimalComment_animal")

  @@index([animal_breedId])
  @@index([userId])
}

model AnimalType {
  id           String        @id @default(cuid())
  name         String        @unique @default("dog")
  animal_breed AnimalBreed[] @relation("AnimalBreed_animal_type")
  order        Int?
}

model AnimalMultimedia {
  id              String    @id @default(cuid())
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  animal          Animal?   @relation("AnimalMultimedia_animal", fields: [animalId], references: [id])
  animalId        String?   @map("animal")
  createdAt       DateTime? @default(now())

  @@index([animalId])
}

model AnimalFavorite {
  id        String    @id @default(cuid())
  animal    Animal?   @relation("AnimalFavorite_animal", fields: [animalId], references: [id])
  animalId  String?   @map("animal")
  user      User?     @relation("AnimalFavorite_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  createdAt DateTime? @default(now())

  @@index([animalId])
  @@index([userId])
}

model AnimalHistory {
  id        String    @id @default(cuid())
  animal    Animal?   @relation("AnimalHistory_animal", fields: [animalId], references: [id])
  animalId  String?   @map("animal")
  status    String?   @default("Registrado")
  notes     String    @default("")
  lat       String    @default("")
  lng       String    @default("")
  last_seen Boolean   @default(false)
  createdAt DateTime? @default(now())

  @@index([animalId])
}

model AnimalComment {
  id        String    @id @default(cuid())
  comment   String    @default("")
  animal    Animal?   @relation("AnimalComment_animal", fields: [animalId], references: [id])
  animalId  String?   @map("animal")
  user      User?     @relation("AnimalComment_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  createdAt DateTime? @default(now())

  @@index([animalId])
  @@index([userId])
}

model AnimalBreed {
  id                       String      @id @default(cuid())
  breed                    String      @default("")
  animal_type              AnimalType? @relation("AnimalBreed_animal_type", fields: [animal_typeId], references: [id])
  animal_typeId            String?     @map("animal_type")
  from_Animal_animal_breed Animal[]    @relation("Animal_animal_breed")
  from_Pet_animal_breed    Pet[]       @relation("Pet_animal_breed")

  @@index([animal_typeId])
}

model Pet {
  id             String          @id @default(cuid())
  name           String          @default("")
  birthday       DateTime        @postgresql.Date
  animal_breed   AnimalBreed?    @relation("Pet_animal_breed", fields: [animal_breedId], references: [id])
  animal_breedId String?         @map("animal_breed")
  user           User?           @relation("Pet_user", fields: [userId], references: [id])
  userId         String?         @map("user")
  multimedia     PetMultimedia[] @relation("PetMultimedia_pet")
  createdAt      DateTime?       @default(now())

  @@index([animal_breedId])
  @@index([userId])
}

model PetMultimedia {
  id              String    @id @default(cuid())
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  pet             Pet?      @relation("PetMultimedia_pet", fields: [petId], references: [id])
  petId           String?   @map("pet")
  createdAt       DateTime? @default(now())

  @@index([petId])
}

model Veterinary {
  id                      String              @id @default(cuid())
  name                    String              @default("")
  description             String              @default("")
  phone                   String              @default("")
  website                 String              @default("")
  street                  String              @default("")
  municipality            String              @default("")
  state                   String              @default("")
  country                 String              @default("")
  cp                      String              @default("")
  lat                     String              @default("")
  lng                     String              @default("")
  views                   Int?
  services                VeterinaryService[] @relation("Veterinary_services")
  user                    User?               @relation("Veterinary_user", fields: [userId], references: [id])
  userId                  String?             @map("user")
  veterinary_social_media SocialMedia[]       @relation("SocialMedia_veterinary")
  veterinary_likes        VeterinaryLike[]    @relation("VeterinaryLike_veterinary")
  veterinary_schedules    Schedule[]          @relation("Schedule_veterinary")
  veterinary_reviews      Review[]            @relation("Review_veterinary")
  createdAt               DateTime?           @default(now())

  @@index([userId])
}

model VeterinaryLike {
  id           String      @id @default(cuid())
  user         User?       @relation("VeterinaryLike_user", fields: [userId], references: [id])
  userId       String?     @map("user")
  veterinary   Veterinary? @relation("VeterinaryLike_veterinary", fields: [veterinaryId], references: [id])
  veterinaryId String?     @map("veterinary")
  createdAt    DateTime?   @default(now())

  @@index([userId])
  @@index([veterinaryId])
}

model VeterinaryService {
  id                       String       @id @default(cuid())
  name                     String       @default("")
  slug                     String       @default("")
  description              String       @default("")
  active                   Boolean      @default(false)
  createdAt                DateTime?    @default(now())
  from_Veterinary_services Veterinary[] @relation("Veterinary_services")
}

model Schedule {
  id            String      @id @default(cuid())
  day           String
  timeIni       Int
  timeEnd       Int
  veterinary    Veterinary? @relation("Schedule_veterinary", fields: [veterinaryId], references: [id])
  veterinaryId  String?     @map("veterinary")
  pet_shelter   PetShelter? @relation("Schedule_pet_shelter", fields: [pet_shelterId], references: [id])
  pet_shelterId String?     @map("pet_shelter")
  createdAt     DateTime?   @default(now())

  @@index([veterinaryId])
  @@index([pet_shelterId])
}

model SocialMedia {
  id            String      @id @default(cuid())
  social_media  String
  link          String      @default("")
  veterinary    Veterinary? @relation("SocialMedia_veterinary", fields: [veterinaryId], references: [id])
  veterinaryId  String?     @map("veterinary")
  pet_shelter   PetShelter? @relation("SocialMedia_pet_shelter", fields: [pet_shelterId], references: [id])
  pet_shelterId String?     @map("pet_shelter")
  createdAt     DateTime?   @default(now())

  @@index([veterinaryId])
  @@index([pet_shelterId])
}

model Review {
  id            String      @id @default(cuid())
  rating        Int?
  review        String      @default("")
  veterinary    Veterinary? @relation("Review_veterinary", fields: [veterinaryId], references: [id])
  veterinaryId  String?     @map("veterinary")
  pet_shelter   PetShelter? @relation("Review_pet_shelter", fields: [pet_shelterId], references: [id])
  pet_shelterId String?     @map("pet_shelter")
  product       Product?    @relation("Review_product", fields: [productId], references: [id])
  productId     String?     @map("product")
  user          User?       @relation("Review_user", fields: [userId], references: [id])
  userId        String?     @map("user")
  createdAt     DateTime?   @default(now())

  @@index([veterinaryId])
  @@index([pet_shelterId])
  @@index([productId])
  @@index([userId])
}

model PetShelter {
  id                       String        @id @default(cuid())
  name                     String        @default("")
  description              String        @default("")
  phone                    String        @default("")
  website                  String        @default("")
  street                   String        @default("")
  municipality             String        @default("")
  state                    String        @default("")
  country                  String        @default("")
  cp                       String        @default("")
  lat                      String        @default("")
  lng                      String        @default("")
  views                    Int?
  user                     User?         @relation("PetShelter_user", fields: [userId], references: [id])
  userId                   String?       @map("user")
  pet_shelter_social_media SocialMedia[] @relation("SocialMedia_pet_shelter")
  pet_shelter_schedules    Schedule[]    @relation("Schedule_pet_shelter")
  pet_shelter_reviews      Review[]      @relation("Review_pet_shelter")
  createdAt                DateTime?     @default(now())

  @@index([userId])
}

model Product {
  id                    String     @id @default(cuid())
  name                  String     @default("")
  price                 Int
  description           String     @default("")
  category              String
  brand                 String
  type                  String
  product_reviews       Review[]   @relation("Review_product")
  createdAt             DateTime?  @default(now())
  from_WishList_product WishList[] @relation("WishList_product")
  from_Cart_product     Cart[]     @relation("Cart_product")
}

model WishList {
  id        String    @id @default(cuid())
  name      String    @default("")
  user      User?     @relation("WishList_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  product   Product[] @relation("WishList_product")
  createdAt DateTime? @default(now())

  @@index([userId])
}

model Cart {
  id              String    @id @default(cuid())
  name            String    @default("")
  user            User?     @relation("Cart_user", fields: [userId], references: [id])
  userId          String?   @map("user")
  product         Product[] @relation("Cart_product")
  createdAt       DateTime? @default(now())
  from_Order_cart Order[]   @relation("Order_cart")

  @@index([userId])
}

model Order {
  id        String    @id @default(cuid())
  total     Int?
  status    String
  cart      Cart?     @relation("Order_cart", fields: [cartId], references: [id])
  cartId    String?   @map("cart")
  user      User?     @relation("Order_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  payment   Payment?  @relation("Order_payment", fields: [paymentId], references: [id])
  paymentId String?   @unique @map("payment")
  createdAt DateTime? @default(now())

  @@index([cartId])
  @@index([userId])
}

model Payment {
  id                      String            @id @default(cuid())
  order_payment           Order?            @relation("Order_payment")
  paymentMethod           PaymentMethod?    @relation("Payment_paymentMethod", fields: [paymentMethodId], references: [id])
  paymentMethodId         String?           @map("paymentMethod")
  amount                  Decimal?          @default("0.000000") @postgresql.Decimal(18, 6)
  status                  PaymentStatusType @default(pending)
  processorStripeChargeId String            @default("")
  stripeErrorMessage      String            @default("")
  processorRefundId       String            @default("")
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @default(now()) @updatedAt

  @@index([paymentMethodId])
}

model PaymentMethod {
  id                String    @id @default(cuid())
  user              User?     @relation("PaymentMethod_user", fields: [userId], references: [id])
  userId            String?   @map("user")
  cardType          String    @default("")
  isDefault         Boolean   @default(false)
  lastFourDigits    String    @default("")
  expMonth          String    @default("")
  expYear           String    @default("")
  stripeProcessorId String    @default("")
  address           String    @default("")
  postalCode        String    @default("")
  ownerName         String    @default("")
  country           String    @default("")
  payment           Payment[] @relation("Payment_paymentMethod")
  type              String?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @default(now()) @updatedAt

  @@index([userId])
}

model TokenNotification {
  id     String  @id @default(cuid())
  token  String  @default("")
  user   User?   @relation("TokenNotification_user", fields: [userId], references: [id])
  userId String? @map("user")

  @@index([userId])
}

enum UserRoleType {
  admin
  user
}

enum PaymentStatusType {
  pending
  processing
  succeeded
  cancelled
  failed
  refunded
}
