# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  lastName: String
  username: String
  email: String
  password: PasswordState
  phone: String
  role: UserRoleType
  profileImage: ImageFieldOutput
  birthday: CalendarDay
  age: String
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  user
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  lastName: StringFilter
  username: StringFilter
  email: StringFilter
  phone: StringFilter
  role: UserRoleTypeNullableFilter
  birthday: CalendarDayNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  username: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  role: OrderDirection
  birthday: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  lastName: String
  username: String
  email: String
  password: String
  phone: String
  role: UserRoleType
  profileImage: ImageFieldInput
  birthday: CalendarDay
  createdAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  lastName: String
  username: String
  email: String
  password: String
  phone: String
  role: UserRoleType
  profileImage: ImageFieldInput
  birthday: CalendarDay
  createdAt: DateTime
}

type Animal {
  id: ID!
  name: String
  animal_breed: AnimalBreed
  user: User
  multimedia(where: AnimalMultimediaWhereInput! = {}, orderBy: [AnimalMultimediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalMultimediaWhereUniqueInput): [AnimalMultimedia!]
  multimediaCount(where: AnimalMultimediaWhereInput! = {}): Int
  history(where: AnimalHistoryWhereInput! = {}, orderBy: [AnimalHistoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalHistoryWhereUniqueInput): [AnimalHistory!]
  historyCount(where: AnimalHistoryWhereInput! = {}): Int
  createdAt: DateTime
}

input AnimalWhereUniqueInput {
  id: ID
}

input AnimalWhereInput {
  AND: [AnimalWhereInput!]
  OR: [AnimalWhereInput!]
  NOT: [AnimalWhereInput!]
  id: IDFilter
  name: StringFilter
  animal_breed: AnimalBreedWhereInput
  user: UserWhereInput
  multimedia: AnimalMultimediaManyRelationFilter
  history: AnimalHistoryManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input AnimalMultimediaManyRelationFilter {
  every: AnimalMultimediaWhereInput
  some: AnimalMultimediaWhereInput
  none: AnimalMultimediaWhereInput
}

input AnimalHistoryManyRelationFilter {
  every: AnimalHistoryWhereInput
  some: AnimalHistoryWhereInput
  none: AnimalHistoryWhereInput
}

input AnimalOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input AnimalUpdateInput {
  name: String
  animal_breed: AnimalBreedRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  multimedia: AnimalMultimediaRelateToManyForUpdateInput
  history: AnimalHistoryRelateToManyForUpdateInput
  createdAt: DateTime
}

input AnimalBreedRelateToOneForUpdateInput {
  create: AnimalBreedCreateInput
  connect: AnimalBreedWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AnimalMultimediaRelateToManyForUpdateInput {
  disconnect: [AnimalMultimediaWhereUniqueInput!]
  set: [AnimalMultimediaWhereUniqueInput!]
  create: [AnimalMultimediaCreateInput!]
  connect: [AnimalMultimediaWhereUniqueInput!]
}

input AnimalHistoryRelateToManyForUpdateInput {
  disconnect: [AnimalHistoryWhereUniqueInput!]
  set: [AnimalHistoryWhereUniqueInput!]
  create: [AnimalHistoryCreateInput!]
  connect: [AnimalHistoryWhereUniqueInput!]
}

input AnimalUpdateArgs {
  where: AnimalWhereUniqueInput!
  data: AnimalUpdateInput!
}

input AnimalCreateInput {
  name: String
  animal_breed: AnimalBreedRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  multimedia: AnimalMultimediaRelateToManyForCreateInput
  history: AnimalHistoryRelateToManyForCreateInput
  createdAt: DateTime
}

input AnimalBreedRelateToOneForCreateInput {
  create: AnimalBreedCreateInput
  connect: AnimalBreedWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input AnimalMultimediaRelateToManyForCreateInput {
  create: [AnimalMultimediaCreateInput!]
  connect: [AnimalMultimediaWhereUniqueInput!]
}

input AnimalHistoryRelateToManyForCreateInput {
  create: [AnimalHistoryCreateInput!]
  connect: [AnimalHistoryWhereUniqueInput!]
}

type AnimalType {
  id: ID!
  name: String
  animal_breed(where: AnimalBreedWhereInput! = {}, orderBy: [AnimalBreedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalBreedWhereUniqueInput): [AnimalBreed!]
  animal_breedCount(where: AnimalBreedWhereInput! = {}): Int
  order: Int
}

input AnimalTypeWhereUniqueInput {
  id: ID
  name: String
}

input AnimalTypeWhereInput {
  AND: [AnimalTypeWhereInput!]
  OR: [AnimalTypeWhereInput!]
  NOT: [AnimalTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  animal_breed: AnimalBreedManyRelationFilter
  order: IntNullableFilter
}

input AnimalBreedManyRelationFilter {
  every: AnimalBreedWhereInput
  some: AnimalBreedWhereInput
  none: AnimalBreedWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AnimalTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
}

input AnimalTypeUpdateInput {
  name: String
  animal_breed: AnimalBreedRelateToManyForUpdateInput
  order: Int
}

input AnimalBreedRelateToManyForUpdateInput {
  disconnect: [AnimalBreedWhereUniqueInput!]
  set: [AnimalBreedWhereUniqueInput!]
  create: [AnimalBreedCreateInput!]
  connect: [AnimalBreedWhereUniqueInput!]
}

input AnimalTypeUpdateArgs {
  where: AnimalTypeWhereUniqueInput!
  data: AnimalTypeUpdateInput!
}

input AnimalTypeCreateInput {
  name: String
  animal_breed: AnimalBreedRelateToManyForCreateInput
  order: Int
}

input AnimalBreedRelateToManyForCreateInput {
  create: [AnimalBreedCreateInput!]
  connect: [AnimalBreedWhereUniqueInput!]
}

type AnimalMultimedia {
  id: ID!
  image: ImageFieldOutput
  animal: Animal
  createdAt: DateTime
}

input AnimalMultimediaWhereUniqueInput {
  id: ID
}

input AnimalMultimediaWhereInput {
  AND: [AnimalMultimediaWhereInput!]
  OR: [AnimalMultimediaWhereInput!]
  NOT: [AnimalMultimediaWhereInput!]
  id: IDFilter
  animal: AnimalWhereInput
  createdAt: DateTimeNullableFilter
}

input AnimalMultimediaOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input AnimalMultimediaUpdateInput {
  image: ImageFieldInput
  animal: AnimalRelateToOneForUpdateInput
  createdAt: DateTime
}

input AnimalRelateToOneForUpdateInput {
  create: AnimalCreateInput
  connect: AnimalWhereUniqueInput
  disconnect: Boolean
}

input AnimalMultimediaUpdateArgs {
  where: AnimalMultimediaWhereUniqueInput!
  data: AnimalMultimediaUpdateInput!
}

input AnimalMultimediaCreateInput {
  image: ImageFieldInput
  animal: AnimalRelateToOneForCreateInput
  createdAt: DateTime
}

input AnimalRelateToOneForCreateInput {
  create: AnimalCreateInput
  connect: AnimalWhereUniqueInput
}

type AnimalFavorite {
  id: ID!
  animal: Animal
  user: User
  createdAt: DateTime
}

input AnimalFavoriteWhereUniqueInput {
  id: ID
}

input AnimalFavoriteWhereInput {
  AND: [AnimalFavoriteWhereInput!]
  OR: [AnimalFavoriteWhereInput!]
  NOT: [AnimalFavoriteWhereInput!]
  id: IDFilter
  animal: AnimalWhereInput
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input AnimalFavoriteOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input AnimalFavoriteUpdateInput {
  animal: AnimalRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input AnimalFavoriteUpdateArgs {
  where: AnimalFavoriteWhereUniqueInput!
  data: AnimalFavoriteUpdateInput!
}

input AnimalFavoriteCreateInput {
  animal: AnimalRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
}

type AnimalHistory {
  id: ID!
  animal: Animal
  status: String
  notes: String
  lat: String
  lng: String
  last_seen: Boolean
  createdAt: DateTime
}

input AnimalHistoryWhereUniqueInput {
  id: ID
}

input AnimalHistoryWhereInput {
  AND: [AnimalHistoryWhereInput!]
  OR: [AnimalHistoryWhereInput!]
  NOT: [AnimalHistoryWhereInput!]
  id: IDFilter
  animal: AnimalWhereInput
  status: StringNullableFilter
  notes: StringFilter
  lat: StringFilter
  lng: StringFilter
  last_seen: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AnimalHistoryOrderByInput {
  id: OrderDirection
  status: OrderDirection
  notes: OrderDirection
  lat: OrderDirection
  lng: OrderDirection
  last_seen: OrderDirection
  createdAt: OrderDirection
}

input AnimalHistoryUpdateInput {
  animal: AnimalRelateToOneForUpdateInput
  status: String
  notes: String
  lat: String
  lng: String
  last_seen: Boolean
  createdAt: DateTime
}

input AnimalHistoryUpdateArgs {
  where: AnimalHistoryWhereUniqueInput!
  data: AnimalHistoryUpdateInput!
}

input AnimalHistoryCreateInput {
  animal: AnimalRelateToOneForCreateInput
  status: String
  notes: String
  lat: String
  lng: String
  last_seen: Boolean
  createdAt: DateTime
}

type AnimalComment {
  id: ID!
  comment: String
  animal: Animal
  user: User
  createdAt: DateTime
}

input AnimalCommentWhereUniqueInput {
  id: ID
}

input AnimalCommentWhereInput {
  AND: [AnimalCommentWhereInput!]
  OR: [AnimalCommentWhereInput!]
  NOT: [AnimalCommentWhereInput!]
  id: IDFilter
  comment: StringFilter
  animal: AnimalWhereInput
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input AnimalCommentOrderByInput {
  id: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
}

input AnimalCommentUpdateInput {
  comment: String
  animal: AnimalRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input AnimalCommentUpdateArgs {
  where: AnimalCommentWhereUniqueInput!
  data: AnimalCommentUpdateInput!
}

input AnimalCommentCreateInput {
  comment: String
  animal: AnimalRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
}

type AnimalBreed {
  id: ID!
  breed: String
  animal_type: AnimalType
}

input AnimalBreedWhereUniqueInput {
  id: ID
}

input AnimalBreedWhereInput {
  AND: [AnimalBreedWhereInput!]
  OR: [AnimalBreedWhereInput!]
  NOT: [AnimalBreedWhereInput!]
  id: IDFilter
  breed: StringFilter
  animal_type: AnimalTypeWhereInput
}

input AnimalBreedOrderByInput {
  id: OrderDirection
  breed: OrderDirection
}

input AnimalBreedUpdateInput {
  breed: String
  animal_type: AnimalTypeRelateToOneForUpdateInput
}

input AnimalTypeRelateToOneForUpdateInput {
  create: AnimalTypeCreateInput
  connect: AnimalTypeWhereUniqueInput
  disconnect: Boolean
}

input AnimalBreedUpdateArgs {
  where: AnimalBreedWhereUniqueInput!
  data: AnimalBreedUpdateInput!
}

input AnimalBreedCreateInput {
  breed: String
  animal_type: AnimalTypeRelateToOneForCreateInput
}

input AnimalTypeRelateToOneForCreateInput {
  create: AnimalTypeCreateInput
  connect: AnimalTypeWhereUniqueInput
}

type Pet {
  id: ID!
  name: String
  birthday: CalendarDay
  age: String
  animal_breed: AnimalBreed
  user: User
  multimedia(where: PetMultimediaWhereInput! = {}, orderBy: [PetMultimediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PetMultimediaWhereUniqueInput): [PetMultimedia!]
  multimediaCount(where: PetMultimediaWhereInput! = {}): Int
  createdAt: DateTime
}

input PetWhereUniqueInput {
  id: ID
}

input PetWhereInput {
  AND: [PetWhereInput!]
  OR: [PetWhereInput!]
  NOT: [PetWhereInput!]
  id: IDFilter
  name: StringFilter
  birthday: CalendarDayNullableFilter
  animal_breed: AnimalBreedWhereInput
  user: UserWhereInput
  multimedia: PetMultimediaManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input PetMultimediaManyRelationFilter {
  every: PetMultimediaWhereInput
  some: PetMultimediaWhereInput
  none: PetMultimediaWhereInput
}

input PetOrderByInput {
  id: OrderDirection
  name: OrderDirection
  birthday: OrderDirection
  createdAt: OrderDirection
}

input PetUpdateInput {
  name: String
  birthday: CalendarDay
  animal_breed: AnimalBreedRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  multimedia: PetMultimediaRelateToManyForUpdateInput
  createdAt: DateTime
}

input PetMultimediaRelateToManyForUpdateInput {
  disconnect: [PetMultimediaWhereUniqueInput!]
  set: [PetMultimediaWhereUniqueInput!]
  create: [PetMultimediaCreateInput!]
  connect: [PetMultimediaWhereUniqueInput!]
}

input PetUpdateArgs {
  where: PetWhereUniqueInput!
  data: PetUpdateInput!
}

input PetCreateInput {
  name: String
  birthday: CalendarDay
  animal_breed: AnimalBreedRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  multimedia: PetMultimediaRelateToManyForCreateInput
  createdAt: DateTime
}

input PetMultimediaRelateToManyForCreateInput {
  create: [PetMultimediaCreateInput!]
  connect: [PetMultimediaWhereUniqueInput!]
}

type PetMultimedia {
  id: ID!
  image: ImageFieldOutput
  pet: Pet
  createdAt: DateTime
}

input PetMultimediaWhereUniqueInput {
  id: ID
}

input PetMultimediaWhereInput {
  AND: [PetMultimediaWhereInput!]
  OR: [PetMultimediaWhereInput!]
  NOT: [PetMultimediaWhereInput!]
  id: IDFilter
  pet: PetWhereInput
  createdAt: DateTimeNullableFilter
}

input PetMultimediaOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input PetMultimediaUpdateInput {
  image: ImageFieldInput
  pet: PetRelateToOneForUpdateInput
  createdAt: DateTime
}

input PetRelateToOneForUpdateInput {
  create: PetCreateInput
  connect: PetWhereUniqueInput
  disconnect: Boolean
}

input PetMultimediaUpdateArgs {
  where: PetMultimediaWhereUniqueInput!
  data: PetMultimediaUpdateInput!
}

input PetMultimediaCreateInput {
  image: ImageFieldInput
  pet: PetRelateToOneForCreateInput
  createdAt: DateTime
}

input PetRelateToOneForCreateInput {
  create: PetCreateInput
  connect: PetWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAnimal(data: AnimalCreateInput!): Animal
  createAnimals(data: [AnimalCreateInput!]!): [Animal]
  updateAnimal(where: AnimalWhereUniqueInput!, data: AnimalUpdateInput!): Animal
  updateAnimals(data: [AnimalUpdateArgs!]!): [Animal]
  deleteAnimal(where: AnimalWhereUniqueInput!): Animal
  deleteAnimals(where: [AnimalWhereUniqueInput!]!): [Animal]
  createAnimalType(data: AnimalTypeCreateInput!): AnimalType
  createAnimalTypes(data: [AnimalTypeCreateInput!]!): [AnimalType]
  updateAnimalType(where: AnimalTypeWhereUniqueInput!, data: AnimalTypeUpdateInput!): AnimalType
  updateAnimalTypes(data: [AnimalTypeUpdateArgs!]!): [AnimalType]
  deleteAnimalType(where: AnimalTypeWhereUniqueInput!): AnimalType
  deleteAnimalTypes(where: [AnimalTypeWhereUniqueInput!]!): [AnimalType]
  createAnimalMultimedia(data: AnimalMultimediaCreateInput!): AnimalMultimedia
  createAnimalMultimedias(data: [AnimalMultimediaCreateInput!]!): [AnimalMultimedia]
  updateAnimalMultimedia(where: AnimalMultimediaWhereUniqueInput!, data: AnimalMultimediaUpdateInput!): AnimalMultimedia
  updateAnimalMultimedias(data: [AnimalMultimediaUpdateArgs!]!): [AnimalMultimedia]
  deleteAnimalMultimedia(where: AnimalMultimediaWhereUniqueInput!): AnimalMultimedia
  deleteAnimalMultimedias(where: [AnimalMultimediaWhereUniqueInput!]!): [AnimalMultimedia]
  createAnimalFavorite(data: AnimalFavoriteCreateInput!): AnimalFavorite
  createAnimalFavorites(data: [AnimalFavoriteCreateInput!]!): [AnimalFavorite]
  updateAnimalFavorite(where: AnimalFavoriteWhereUniqueInput!, data: AnimalFavoriteUpdateInput!): AnimalFavorite
  updateAnimalFavorites(data: [AnimalFavoriteUpdateArgs!]!): [AnimalFavorite]
  deleteAnimalFavorite(where: AnimalFavoriteWhereUniqueInput!): AnimalFavorite
  deleteAnimalFavorites(where: [AnimalFavoriteWhereUniqueInput!]!): [AnimalFavorite]
  createAnimalHistory(data: AnimalHistoryCreateInput!): AnimalHistory
  createAnimalHistories(data: [AnimalHistoryCreateInput!]!): [AnimalHistory]
  updateAnimalHistory(where: AnimalHistoryWhereUniqueInput!, data: AnimalHistoryUpdateInput!): AnimalHistory
  updateAnimalHistories(data: [AnimalHistoryUpdateArgs!]!): [AnimalHistory]
  deleteAnimalHistory(where: AnimalHistoryWhereUniqueInput!): AnimalHistory
  deleteAnimalHistories(where: [AnimalHistoryWhereUniqueInput!]!): [AnimalHistory]
  createAnimalComment(data: AnimalCommentCreateInput!): AnimalComment
  createAnimalComments(data: [AnimalCommentCreateInput!]!): [AnimalComment]
  updateAnimalComment(where: AnimalCommentWhereUniqueInput!, data: AnimalCommentUpdateInput!): AnimalComment
  updateAnimalComments(data: [AnimalCommentUpdateArgs!]!): [AnimalComment]
  deleteAnimalComment(where: AnimalCommentWhereUniqueInput!): AnimalComment
  deleteAnimalComments(where: [AnimalCommentWhereUniqueInput!]!): [AnimalComment]
  createAnimalBreed(data: AnimalBreedCreateInput!): AnimalBreed
  createAnimalBreeds(data: [AnimalBreedCreateInput!]!): [AnimalBreed]
  updateAnimalBreed(where: AnimalBreedWhereUniqueInput!, data: AnimalBreedUpdateInput!): AnimalBreed
  updateAnimalBreeds(data: [AnimalBreedUpdateArgs!]!): [AnimalBreed]
  deleteAnimalBreed(where: AnimalBreedWhereUniqueInput!): AnimalBreed
  deleteAnimalBreeds(where: [AnimalBreedWhereUniqueInput!]!): [AnimalBreed]
  createPet(data: PetCreateInput!): Pet
  createPets(data: [PetCreateInput!]!): [Pet]
  updatePet(where: PetWhereUniqueInput!, data: PetUpdateInput!): Pet
  updatePets(data: [PetUpdateArgs!]!): [Pet]
  deletePet(where: PetWhereUniqueInput!): Pet
  deletePets(where: [PetWhereUniqueInput!]!): [Pet]
  createPetMultimedia(data: PetMultimediaCreateInput!): PetMultimedia
  createPetMultimedias(data: [PetMultimediaCreateInput!]!): [PetMultimedia]
  updatePetMultimedia(where: PetMultimediaWhereUniqueInput!, data: PetMultimediaUpdateInput!): PetMultimedia
  updatePetMultimedias(data: [PetMultimediaUpdateArgs!]!): [PetMultimedia]
  deletePetMultimedia(where: PetMultimediaWhereUniqueInput!): PetMultimedia
  deletePetMultimedias(where: [PetMultimediaWhereUniqueInput!]!): [PetMultimedia]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: UserRoleType
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  animals(where: AnimalWhereInput! = {}, orderBy: [AnimalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalWhereUniqueInput): [Animal!]
  animal(where: AnimalWhereUniqueInput!): Animal
  animalsCount(where: AnimalWhereInput! = {}): Int
  animalTypes(where: AnimalTypeWhereInput! = {}, orderBy: [AnimalTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalTypeWhereUniqueInput): [AnimalType!]
  animalType(where: AnimalTypeWhereUniqueInput!): AnimalType
  animalTypesCount(where: AnimalTypeWhereInput! = {}): Int
  animalMultimedias(where: AnimalMultimediaWhereInput! = {}, orderBy: [AnimalMultimediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalMultimediaWhereUniqueInput): [AnimalMultimedia!]
  animalMultimedia(where: AnimalMultimediaWhereUniqueInput!): AnimalMultimedia
  animalMultimediasCount(where: AnimalMultimediaWhereInput! = {}): Int
  animalFavorites(where: AnimalFavoriteWhereInput! = {}, orderBy: [AnimalFavoriteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalFavoriteWhereUniqueInput): [AnimalFavorite!]
  animalFavorite(where: AnimalFavoriteWhereUniqueInput!): AnimalFavorite
  animalFavoritesCount(where: AnimalFavoriteWhereInput! = {}): Int
  animalHistories(where: AnimalHistoryWhereInput! = {}, orderBy: [AnimalHistoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalHistoryWhereUniqueInput): [AnimalHistory!]
  animalHistory(where: AnimalHistoryWhereUniqueInput!): AnimalHistory
  animalHistoriesCount(where: AnimalHistoryWhereInput! = {}): Int
  animalComments(where: AnimalCommentWhereInput! = {}, orderBy: [AnimalCommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalCommentWhereUniqueInput): [AnimalComment!]
  animalComment(where: AnimalCommentWhereUniqueInput!): AnimalComment
  animalCommentsCount(where: AnimalCommentWhereInput! = {}): Int
  animalBreeds(where: AnimalBreedWhereInput! = {}, orderBy: [AnimalBreedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnimalBreedWhereUniqueInput): [AnimalBreed!]
  animalBreed(where: AnimalBreedWhereUniqueInput!): AnimalBreed
  animalBreedsCount(where: AnimalBreedWhereInput! = {}): Int
  pets(where: PetWhereInput! = {}, orderBy: [PetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PetWhereUniqueInput): [Pet!]
  pet(where: PetWhereUniqueInput!): Pet
  petsCount(where: PetWhereInput! = {}): Int
  petMultimedias(where: PetMultimediaWhereInput! = {}, orderBy: [PetMultimediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PetMultimediaWhereUniqueInput): [PetMultimedia!]
  petMultimedia(where: PetMultimediaWhereUniqueInput!): PetMultimedia
  petMultimediasCount(where: PetMultimediaWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
